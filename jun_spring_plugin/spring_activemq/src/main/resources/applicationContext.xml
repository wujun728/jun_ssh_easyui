<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.0.xsd
    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.0.xsd">

	<!-- 将多个配置文件读取到容器中，交给Spring管理 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath:spring-mq.properties</value>
				<!-- 推荐使用file的方式引入，这样可以将配置和代码分离 -->
				<!--<value>file:/opt/demo/config/demo-mq.properties</value>-->
				<!--<value>file:/opt/demo/config/demo-remote.properties</value>-->
			</list>
		</property>
	</bean>

	<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">
		<property name="brokerURL" value="${jms.brokerURL}" />
		<property name="userName" value="${jms.username}" />
		<property name="password" value="${jms.password}" />
		<!-- 是否异步发送消息 -->
		<property name="useAsyncSend" value="true" />
		<property name="alwaysSessionAsync" value="false" />
	</bean>
	<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">
		<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->
		<property name="targetConnectionFactory" ref="targetConnectionFactory"/>
	</bean>

	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->
		<property name="connectionFactory" ref="connectionFactory"/>
	</bean>




	<!-- 一共三个实例:第一个 one this is the Message Driven POJO (MDP) 扫描注入类 -->
	<bean id="messageListener" class="com.smq.listener.ExampleListener" >

	</bean>

	<!--这个是队列目的地-->
	<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>queue</value>
		</constructor-arg>
	</bean>

	<!-- and this is the attendant message listener container -->
	<bean id="listenerContainer"
		  class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="concurrentConsumers" value="5"/>
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="queueDestination" />
		<property name="messageListener" ref="messageListener" />
	</bean>


	<!--  第二个 two 可以获取session的MessageListener -->
	<bean id="consumerSessionAwareMessageListener" class="com.smq.listener.ConsumerSessionAwareMessageListener">
		<!--<property name="destination" ref="queueDestination"/>-->
	</bean>
	<!--这个是sessionAwareQueue目的地-->
	<bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>sessionAwareQueue</value>
		</constructor-arg>
	</bean>

	<bean id="sessionAwareListenerContainer"
		  class="org.springframework.jms.listener.ServerSessionMessageListenerContainer">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="sessionAwareQueue" />
		<property name="messageListener" ref="consumerSessionAwareMessageListener" />
	</bean>


	<!-- 第三个: three this is the Message Driven POJO (MDP) -->
	<bean id="messageListenerpojo" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg>
			<bean class="com.smq.service.impl.DefaultMessageDelegate"/>
		</constructor-arg>
	</bean>

	<!--这个是队列目的地-->
	<bean id="adapterDestination" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg>
			<value>adapterDestination</value>
		</constructor-arg>
	</bean>

	<!-- and this is the attendant message listener container... -->
	<bean id="listenerContainerpojo"
		  class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="concurrentConsumers" value="5"/>
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="destination" ref="adapterDestination" />
		<property name="messageListener" ref="messageListenerpojo" />
	</bean>

<!-- 直接接收消息 和上面的分开-->
	<bean id="messageListenertext" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">
		<constructor-arg>
			<bean class="com.smq.service.impl.DefaultTextMessageDelegate"/>
		</constructor-arg>
		<property name="defaultListenerMethod" value="receive"/>
		<!-- we don't want automatic message context extraction 定义receive方法 -->
		<property name="messageConverter">
			<null/>
		</property>
	</bean>


	<!--创建事务管理器-->
	<bean id="transactionManager" class="org.springframework.jms.connection.JmsTransactionManager">
		<property name="connectionFactory" ref="connectionFactory" />
	</bean>
	<!--然后你只需要把它加入到我们先前的容器配置中。容器会处理其他的事情。-->
	<!--<bean id="listenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">-->
		<!--<property name="concurrentConsumers" value="5" />-->
		<!--<property name="connectionFactory" ref="connectionFactory" />-->
		<!--<property name="destination" ref="destination" />-->
		<!--<property name="messageListener" ref="messageListener" />-->
		<!--<property name="transactionManager" ref="transactionManager" />-->
	<!--</bean>-->
</beans>