<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
    <context id="context1" targetRuntime="MyBatis3" defaultModelType="flat">
        <!-- 生成equals 和hashcode方法-->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>
        <!-- 实现序列化-->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 生成toString 方法-->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>
        <!-- 重命名Example相关的类名-->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example"></property>
            <property name="replaceString" value="Criteria"></property>
        </plugin>
        <!-- 将Mapper.java和mapper.xml文件中的Example的方法重命名为自己定义的-->
        <plugin type="org.mybatis.generator.plugins.MyRenameExampleMethodPlugin">
            <property name="searchString" value="Example"></property>
            <property name="replaceString" value="Criteria"></property>
        </plugin>
        <!-- 增加分页插件，分页参数自定义-->
        <plugin type="org.mybatis.generator.plugins.MyPaginationPlugin">
            <property name="limitStartName" value="start"></property>
            <property name="limitSizeName" value="end"></property>
        </plugin>
        <!--去掉表前缀、重命名Mapper后缀；如果在table标签中设置了domainObjectName、mapperName后以table中设置的为准-->
        <plugin type="org.mybatis.generator.plugins.MyReplaceTablePrefix">
            <!--如tc_user;前缀tc 不包含 "_" -->
            <property name="tablePrefix" value="TC"></property>
            <!--mapper文件后缀；如Dao; UserDao-->
            <property name="mapperSuffix" value="Dao"></property>
        </plugin>
        <!-- 增加BaseDao插件，名称可以自定义-->
        <plugin type="org.mybatis.generator.plugins.MyBaseDaoPlugin" >
            <!--baseDao在你应用中的完全限定名 name:任意定义，表示BaseDao的名称；targetPackage、targetProject和下面的配置同理-->
            <property name="name" value="BaseDao"></property>
            <property name="targetPackage" value="com.xxx.xxx"></property>
            <property name="targetProject" value="project\src\main\java"></property>
        </plugin>
        <!--增加自定义通用查询ExampleClass的包名和更改所在的目标工程-->
        <plugin type="org.mybatis.generator.plugins.MyPackageExampleClassPlugin">
            <property name="targetPackage" value="com.xxx.xxx"></property>
            <!--true:表示使用javaClientGenerator的targetProject，false：默认值，表示使用javaModelGenerator的targetProject-->
            <property name="isProject" value="false"></property>
        </plugin>

        <!--单个对象查询插件，可根据不同字段进行查询-->
        <plugin type="org.mybatis.generator.plugins.MySelectSingleByExamplePlugin"/>

        <!--添加生成批量新增接口插件-->
        <plugin type="org.mybatis.generator.plugins.MyInsertBatchPlugin"/>
        <!--添加生成批量修改接口插件-->
        <plugin type="org.mybatis.generator.plugins.MyUpdateBatchPlugin"/>

        <!-- 生成业务方法-->
        <plugin type="org.mybatis.generator.plugins.MyBaseServicePlugin">
            <!--name:baseService的名称-->
            <property name="name" value="BaseService"></property>
            <!--name:baseService存放的包名-->
            <property name="targetPackageBaseService" value="ibatisData.base"></property>
            <!--baseService 实现存放的包-->
            <property name="targetPackageBaseServiceImpl" value="ibatisData.base.impl"></property>
            <!--baseService所在的工程-->
            <property name="targetBaseServiceProject" value="D:\workspace-git\mybatis-generator-core\src\test\java"></property>
            <property name="targetBaseServiceImplProject" value="D:\workspace-git\mybatis-generator-core\src\test\java"></property>


            <!--业务接口存放的包名-->
            <property name="targetPackageBusinessService" value="ibatisData.bes"></property>
            <!--业务接口的实现-->
            <property name="targetPackageBusinessServiceImpl" value="ibatisData.bes.impl"></property>
            <!--业务所在的工程-->
            <property name="targetBusinessServiceProject" value="D:\workspace-git\mybatis-generator-core\src\test\java"></property>

            <!--业务所在的工程-->
            <property name="targetBusinessServiceImplProject" value="D:\workspace-git\mybatis-generator-core\src\test\java"></property>

            <property name="searchString" value="Example"></property>
            <property name="replaceString" value="Criteria"></property>
            <!--baseDao接口的完全限定名-->
            <property name="baseDaoPackage" value="ibatisData.ff.BaseMapper"></property>
        </plugin>

        <!--获取表中的注释为实体类中的属性注释 -->
        <commentGenerator type="org.mybatis.generator.plugins.MyCommentGenerator">
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false" />
            <property name="suppressDate" value="false" />
            <property name="addRemarkComments" value="true" />
        </commentGenerator>

        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://ip:3306/database?characterEncoding=utf-8"
                        userId="root" password="111111">
        </jdbcConnection>
        <!--转换数据类型，通过自定义将BIT和TINYINT转换为integer-->
        <javaTypeResolver type="org.mybatis.generator.plugins.MyJavaTypeResolverDefaultImpl">
            <!--true:当数据类型为decimal时，始终生成BigDecimal；false：当数据库类型为decimal时，但是没有小数点的时候，则生成Long类型-->
            <property name="forceBigDecimals" value="true" />
        </javaTypeResolver>
        <!-- 生成模型的包名和位置 targetPackage 要生成在哪个包下；targetProject：该包所在的父级目录-->
        <javaModelGenerator targetPackage="com.xxx.entity"
                            targetProject="project\src\main\java" />
        <!-- 生成映射文件的包名和位置-->
        <sqlMapGenerator targetPackage="genMapper"
                         targetProject="project\src\main\resources" />
        <!-- 生成DAO的包名和位置-->
        <javaClientGenerator targetPackage="com.xxx.xxx.dao"
                             targetProject="project\src\main\java" type="org.mybatis.generator.plugins.MyJavaMapperGenerator"/>

        <!-- 要生成哪些表：tableName：需要生成的表名；domainObjectName：自定义的对应改表的实体类名称；-->
        <table tableName="table1" domainObjectName="Table1" mapperName="Table1Dao">
            <!-- 如果是自增主键，column需要修改为自己的主键名称-->
            <generatedKey identity="true" column="id" sqlStatement="SELECT LAST_INSERT_ID()"></generatedKey>
        </table>
    </context>
</generatorConfiguration>