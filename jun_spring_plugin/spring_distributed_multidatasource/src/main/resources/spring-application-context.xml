<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 自动扫描所配置的包下所有类及其子包和其子包下的类 -->
	<context:component-scan base-package="com.jun.plugin.multidatasource.dao" />

	<!-- 读取properties文件,使在当前XML配置文件中可以通过${key}的形式获得properties文件中的对应key的value -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!-- 数据库连接配置 -->
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源,Hibernate数据库连接配置 -->
	<bean id="abstractDataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<bean id="dataSource_a" parent="abstractDataSource">
		<property name="url" value="${jdbc_a.url}" />
	</bean>

	<bean id="dataSource_b" parent="abstractDataSource">
		<property name="url" value="${jdbc_b.url}" />
	</bean>

	<bean id="dataSource_c" parent="abstractDataSource">
		<property name="url" value="${jdbc_c.url}" />
	</bean>

	<!-- 动态切换数据源自定义实现类 -->
	<bean id="dynamicDataSource" class="com.jun.plugin.multidatasource.util.DynamicDataSource">
		<!-- 通过key-value的形式来关联数据源 -->
		<property name="targetDataSources">
			<map>
				<entry key="a" value-ref="dataSource_a"></entry>
				<entry key="b" value-ref="dataSource_b"></entry>
				<entry key="c" value-ref="dataSource_c"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_c" />
	</bean>
	
	<!-- Hibernate属性配置 -->
	<bean name="hibernateProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="hibernate.query.factory_class">${hibernate.query.factory_class}</prop>
			</props>
		</property>
	</bean>

	<!-- 集成Hibernate配置.该配置才将Hibernate交由Spring管理,上面两个Hibernate的配置仅仅是对Hibernate与数据库直接的配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="hibernateProperties" ref="hibernateProperties" />
		<property name="packagesToScan">
			<list>
				<value>com.jun.plugin.multidatasource.model</value><!-- 自动扫描当前包下的所有实体类 -->
			</list>
		</property>
	</bean>

	<!-- 事务管理配置,必须 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 开启事务注解配置,使Spring可以通过Annotation管理事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- XML方式配置事务管理 -->
	<aop:config>
		<aop:pointcut id="businessService"
			expression="execution(public * com.jun.plugin.multidatasource.dao..*.*(..))" />
		<aop:advisor pointcut-ref="businessService" advice-ref="tx-advice" />
	</aop:config>

	<tx:advice id="tx-advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- XML方式配置事务管理END -->

</beans>