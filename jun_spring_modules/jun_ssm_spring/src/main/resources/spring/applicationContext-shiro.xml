<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop.xsd"
	default-lazy-init="false">

	<!-- 权限管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 数据库认证的实现 org.springrain.frame.shiro.ShiroDbRealm -->
		<property name="realm" ref="shiroDbRealm" />
		<!-- session 管理器 -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- 缓存管理器 -->
		<property name="cacheManager" ref="shiroCacheManager" />
	</bean>
	<!-- session管理器 -->
	<bean id="sessionManager"
		class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- URL重写中去掉jsessionId -->
        <property name="sessionIdUrlRewritingEnabled"  value="false"  />		
		<!-- 超时时间 -->
		<property name="globalSessionTimeout" value="${cache.timeout}" />
		
		<!-- 定时检查失效的session,默认true -->
		<property name="sessionValidationSchedulerEnabled" value="true" />
		<!-- 删除过期的session,默认true -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 相隔多久检查一次session的有效性,使用默认的60分钟  -->
		<!--  
		<property name="sessionValidationInterval" value="${cache.timeout}" />
		-->
		<!-- session存储的实现 -->
		<property name="sessionDAO" ref="shiroSessionDao" />
		<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
		<property name="sessionIdCookie" ref="shareSessionCookie" />
		
	</bean>

	<!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
	<bean id="shareSessionCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<!-- cookie的name,对应的默认是 JSESSIONID -->
		<constructor-arg name="name" value="SHAREJSESSIONID" />
		<!-- jsessionId的path为 / 用于多个系统共享jsessionId -->
		<property name="path" value="/" />
		<!-- more secure, protects against XSS attacks -->
		<property name="httpOnly" value="true" />
		
	</bean>
	<!-- session存储的实现 -->
	<bean id="shiroSessionDao"
		class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO" />

	<!-- 单机session -->
	
	
	<bean id="shiroCacheManager" class="org.apache.shiro.cache.MemoryConstrainedCacheManager" />
    
	<!-- session 集群 -->
	<!-- 
	<bean id="shiroCacheManager" class="org.springrain.frame.shiro.ShiroRedisCacheManager"> 
		<property name="cache" ref="redisCache" /> 
	</bean>
	 -->
	
	<!-- shiro的主过滤器,beanId 和web.xml中配置的filter name需要保持一致 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"
		depends-on="frameperms">
		<!-- 安全管理器 -->
		<property name="securityManager" ref="securityManager" />
		
		<!-- 默认的登陆访问url -->
		<property name="loginUrl" value="/system/login" />
		<!-- 没有权限的界面 -->
		<property name="unauthorizedUrl" value="/errorpage/unauth"/>
	
		<!-- 访问地址的过滤规则,从上至下,从左至右的优先级,如果有匹配的规则,就会返回,不会再进行匹配 -->
		<property name="filterChainDefinitions">
			<value>
			    /layui/** = noSessionCreation
				/js/** =  noSessionCreation
				/u/** =  noSessionCreation
				/css/** = noSessionCreation
				/images/** = noSessionCreation
				/img/** = noSessionCreation
				/favicon.ico = noSessionCreation
				
				<!-- S 目前将upload文件权限放开，等文件系统模块完成以后再修改  -->
				/upload/**=noSessionCreation
				/ueditor/**=user<!-- UEditor的配置访问路径  -->
				<!-- E  -->
				
				/errorpage/*=noSessionCreation
				
				/mp/**=firewall
				
				/f/pc/** = firewall
				/f/mp/** = firewall,wxmpautologin
				
				
				/tokenerror = firewall,user
				
				/getCaptcha=firewall
				
				/login = firewall
				/index = firewall,user,keepone
				/logout = firewall,frontuser
				
				/s/*/login = firewall
				/s/*/index = firewall,siteuser,keepone
				/s/*/logout = firewall,siteuser
				/s/*/menu/leftMenu=firewall,siteuser,keepone
				/s/**=firewall,siteuser,keepone,frameperms
				
				/system/login = firewall
				/system/index =firewall,systemuser,framefwlog,keepone
				/system/logout = firewall,systemuser
				/system/menu/leftMenu=firewall,systemuser,keepone
				/system/** = firewall,systemuser,keepone,frameperms
				
			
				
				/** = firewall,user,keepone,frameperms
			</value>
		</property>
		<!-- 声明自定义的过滤器 -->
		<property name="filters">
			<map>
			    <!-- 访问日志记录的过滤器 -->
			    <entry key="framefwlog" value-ref="framefwlog"></entry>
			    <!--权限校验的过滤器 -->
				<entry key="frameperms" value-ref="frameperms"></entry>
				
				 <!-- 前台用户过滤器 -->
				<entry key="frontuser" value-ref="frontuser"></entry>
				 <!-- 网站后台用户过滤器 -->
				<entry key="siteuser" value-ref="siteuser"></entry>
				 <!-- 后台用户过滤器 -->
				<entry key="systemuser" value-ref="systemuser"></entry>
				
			    <!-- 踢出上个账户的过滤器 -->
			    <entry key="keepone" value-ref="keepone"/>
			     <!-- 静态化 过滤器 -->
			    <entry key="statichtml" value-ref="statichtml"/>
			    
			     <!-- 防火墙 过滤器 -->
			    <entry key="firewall" value-ref="firewall"/>
			    
			    
			    <!-- 微信登录验证过滤器 -->
			    <entry key="wxmpautologin" value-ref="wxmpautologin"/>
			    
			    
			</map>
		</property>
	</bean>
	<!--
	 LifecycleBeanPostProcessor用于在实现了Initializable接口的Shiro bean初始化时调用Initializable接口回调，
	  在实现了Destroyable接口的Shiro bean销毁时调用 Destroyable接口回调。
	  如UserRealm就实现了Initializable，而DefaultSecurityManager实现了Destroyable。 -->
	<!-- 
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	 -->
	 
	 
	 <!-- 简单的防火墙策略,一般是专业防火墙实现的功能 -->
	 <bean id="firewall" class="org.springrain.frame.shiro.FrameFireWallFilter">
	 
	    <!--
		<property name="firewallLockCount" value="10000" />
		 -->
		 
		 <!-- 如果值小于0 例如 -1,认为不限制,黑名单依然有效 -->
		<property name="firewallLockCheckCount" value="-1" />
		<property name="firewallLockCheckSecond" value="60" />
		<property name="firewallLockedSecond" value="600" />
		
		<property name="blackList" >
		 <list>
		 	<value>127.0.0.2</value>
		 </list>
		</property>
		
		<property name="whiteList" >
		 <list>
		 	<value>127.0.0.1</value>
		 </list>
		</property>
		
		
		
	</bean>
	 

</beans>
